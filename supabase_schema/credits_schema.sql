-- Este arquivo detalha a estrutura da tabela e as políticas de segurança para o sistema de CRÉDITOS.
-- A tabela 'transactions' armazena tanto créditos quanto débitos, diferenciados pela coluna 'type'.

-- ### TABELA DE CRÉDITOS (E DÉBITOS) ###
-- Tabela única para registrar todas as transações de dopamina.

CREATE TABLE transactions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Identificador único da transação
  user_id UUID REFERENCES auth.users(id) NOT NULL,      -- Vincula a transação ao usuário que a realizou
  description TEXT NOT NULL,                             -- Descrição da ação que gerou o crédito
  points INTEGER NOT NULL,                               -- Quantidade de pontos (sempre positiva para créditos)
  type TEXT NOT NULL CHECK (type IN ('credit', 'debit')), -- Tipo da transação, será 'credit' para créditos
  created_at TIMESTAMPTZ DEFAULT NOW()                  -- Data e hora da criação do registro
);


-- ### POLÍTICAS DE SEGURANÇA PARA CRÉDITOS ###
-- As políticas abaixo garantem que os dados dos usuários sejam privados e seguros.

-- 1. Habilitar a Segurança de Nível de Linha (RLS)
ALTER TABLE transactions ENABLE ROW LEVEL SECURITY;

-- 2. Política de LEITURA: Permitir que usuários leiam apenas seus próprios créditos.
CREATE POLICY "Allow users to read their own credit transactions" ON transactions
  FOR SELECT
  USING (auth.uid() = user_id);

-- 3. Política de INSERÇÃO: Permitir que usuários adicionem créditos apenas para si mesmos.
CREATE POLICY "Allow users to insert their own credit transactions" ON transactions
  FOR INSERT
  WITH CHECK (auth.uid() = user_id);

-- 4. Política de ATUALIZAÇÃO (Opcional): Geralmente, não se atualizam transações, mas se pode permitir.
-- CREATE POLICY "Allow users to update their own transactions" ON transactions
--   FOR UPDATE
--   USING (auth.uid() = user_id);

-- 5. Política de EXCLUSÃO (Opcional): Permitir que usuários apaguem seus próprios registros.
-- CREATE POLICY "Allow users to delete their own transactions" ON transactions
--   FOR DELETE
--   USING (auth.uid() = user_id);
